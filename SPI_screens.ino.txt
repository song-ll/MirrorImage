#include <U8glib.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085_U.h>

Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);
U8GLIB_PCD8544         
u8g(13, 12, 9, 11, 7); 
// SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9, Reset = 8
U8GLIB_SSD1306_128X64 u8g2(13, 11, 7 , 9);    
// SPI Com: SCK = 13, MOSI = 11, CS = 7,  A0 = 9

#define logo_dx_84x48_width 84
#define logo_dx_84x48_height 48

int draw_state = 1;
float pressure = 0.0;
float temperature = 0.0;
char pre[10];
char tem[10];
unsigned long timer;

int centerX = 42;
int centerY = 24;
int radius = 0;
int stepAngle = 0;
int stepRadius = 0;


static unsigned char logo_dx_84x48_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0x07, 0xff, 0x1f, 0x00, 0xc0, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff,
  0x0f, 0xff, 0x3f, 0x00, 0xe0, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0xff,
  0x01, 0xf8, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf0, 0xff, 0x01,
  0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0x0f, 0xff, 0x3f, 0x00,
  0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0x8f, 0xff, 0x1f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00,
  0x80, 0xff, 0x0f, 0xfe, 0xff, 0xff, 0x07, 0x00, 0xff, 0x07, 0x00, 0x80,
  0xff, 0x1f, 0xfc, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfc, 0x7f, 0xf0,
  0xff, 0xff, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0xfc, 0xff, 0xe0, 0xff,
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0x07, 0x00, 0x00, 0xe0, 0xff, 0x83, 0xff, 0x1f, 0x00, 0x00,
  0xff, 0x07, 0x00, 0x00, 0xe0, 0xff, 0x83, 0xff, 0x1f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00,
  0x00, 0xfc, 0xff, 0xe0, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00,
  0xfc, 0x7f, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x80, 0xff, 0x1f, 0xfc,
  0xff, 0xff, 0x03, 0x00, 0xff, 0x07, 0x00, 0x80, 0xff, 0x0f, 0xfe, 0xff,
  0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0x8f, 0xff, 0x1f, 0x00,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0x0f, 0xff, 0x3f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
  0xff, 0x7f, 0xf0, 0xff, 0x01, 0xfc, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x3f, 0xf8, 0xff, 0x01, 0xf8, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0x3f,
  0x00, 0xe0, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0x1f, 0x00,
  0xc0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define arduino_width 84
#define arduino_height 48
static unsigned char arduino_bits[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x1f, 0x00,
  0x00, 0x80, 0xff, 0x03, 0x58, 0x00, 0x00, 0x80, 0xff, 0x7f, 0x00, 0x00,
  0xf0, 0xff, 0x1f, 0x58, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x01, 0x00, 0xfc,
  0xff, 0x7f, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x0f, 0x00, 0xff, 0xff,
  0xff, 0x01, 0x00, 0x00, 0xfe, 0xff, 0xff, 0x1f, 0xc0, 0xff, 0xff, 0xff,
  0x03, 0x00, 0x00, 0xff, 0x07, 0xf8, 0x3f, 0xe0, 0xff, 0x00, 0xfe, 0x07,
  0x00, 0x80, 0x7f, 0x00, 0x80, 0xff, 0xf0, 0x0f, 0x00, 0xe0, 0x0f, 0x00,
  0x80, 0x3f, 0x00, 0x00, 0xff, 0xf9, 0x07, 0x00, 0xc0, 0x1f, 0x00, 0xc0,
  0x1f, 0x00, 0x00, 0xfc, 0xfd, 0x03, 0x00, 0xc0, 0x3f, 0x00, 0xe0, 0x0f,
  0x00, 0x00, 0xf8, 0xff, 0x00, 0x3c, 0x00, 0x3f, 0x00, 0xe0, 0x07, 0x00,
  0x00, 0xf0, 0xff, 0x00, 0x3c, 0x00, 0x3f, 0x00, 0xe0, 0x07, 0x00, 0x00,
  0xe0, 0x7f, 0x00, 0x3c, 0x00, 0x7f, 0x00, 0xe0, 0x07, 0xfc, 0x1f, 0xc0,
  0x3f, 0x80, 0xff, 0x03, 0x7e, 0x00, 0xe0, 0x07, 0xfc, 0x1f, 0xc0, 0x1f,
  0x80, 0xff, 0x03, 0x7e, 0x00, 0xe0, 0x07, 0xfc, 0x1f, 0xc0, 0x3f, 0x80,
  0xff, 0x03, 0x7e, 0x00, 0xe0, 0x07, 0x00, 0x00, 0xf0, 0x7f, 0x00, 0x3c,
  0x00, 0x7f, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0xf0, 0xff, 0x00, 0x3c, 0x00,
  0x3f, 0x00, 0xc0, 0x0f, 0x00, 0x00, 0xf8, 0xff, 0x01, 0x3c, 0x80, 0x3f,
  0x00, 0xc0, 0x3f, 0x00, 0x00, 0xfe, 0xf9, 0x07, 0x00, 0xc0, 0x1f, 0x00,
  0x80, 0x7f, 0x00, 0x00, 0xff, 0xf8, 0x0f, 0x00, 0xe0, 0x1f, 0x00, 0x80,
  0xff, 0x00, 0xc0, 0x7f, 0xf0, 0x1f, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xfe,
  0x1f, 0xfe, 0x3f, 0xc0, 0xff, 0x83, 0xff, 0x07, 0x00, 0x00, 0xfc, 0xff,
  0xff, 0x1f, 0x80, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0xf8, 0xff, 0xff,
  0x07, 0x00, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x00,
  0x00, 0xf8, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00,
  0xc0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x00,
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1c, 0xfc, 0xf0, 0xc1, 0x30, 0xff, 0x1c, 0x87, 0x07, 0x00,
  0x00, 0x1e, 0xfc, 0xf1, 0xc7, 0x30, 0xff, 0x3c, 0xe7, 0x0f, 0x00, 0x00,
  0x1e, 0x8c, 0x31, 0xce, 0x30, 0x18, 0x3c, 0x67, 0x1c, 0x00, 0x00, 0x36,
  0x8c, 0x31, 0xce, 0x30, 0x18, 0x6c, 0x77, 0x1c, 0x00, 0x00, 0x33, 0xfc,
  0x31, 0xce, 0x30, 0x18, 0xdc, 0x77, 0x1c, 0x00, 0x00, 0x7f, 0xfc, 0x30,
  0xce, 0x30, 0x18, 0xdc, 0x77, 0x1c, 0x00, 0x80, 0x63, 0xcc, 0xf1, 0xc7,
  0x3f, 0xff, 0x9c, 0xe7, 0x0e, 0x00, 0x80, 0xe1, 0x8c, 0xf1, 0x83, 0x1f,
  0xff, 0x1c, 0xc7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void draw(void) {
  switch (draw_state) {
    case 1:
      u8g.drawXBMP( 0, 0, logo_dx_84x48_width, logo_dx_84x48_height, logo_dx_84x48_bits);
      break;
    case 2:
      u8g.setFont(u8g_font_04b_03r);
      u8g.drawStr(4, 12, "1.6 inch Nokia 5110");
      u8g.drawStr(10, 18, "LCD Module with");
      u8g.drawStr(5, 24, "Blue Backlight for");
      u8g.drawStr(27, 30, "Arduino");
      u8g.drawStr(18, 42, "SKU: 145860");
      break;
    case 3:
      u8g.drawXBMP( 0, 0, arduino_width, arduino_height, arduino_bits);
      break;
    case 4:
      u8g.setFont(u8g_font_04b_03r);
      u8g.drawStr(10,  8, "A demonstration");
      u8g.drawStr(13, 14, "of output from");
      u8g.drawStr(5 , 20, "the BOSCH BMP180");
      u8g.drawStr(8,  26, "Temp & Pressure");
      u8g.drawStr(13,  32, "Sensor Module");
      u8g.drawStr(18, 42, "SKU: 331485");
      break;
    case 5:
      u8g.setFont(u8g_font_tpssb);
      u8g.drawStr(2 , 10, "Temperature:");
      u8g.drawStr(28, 24, tem);
      u8g.drawStr(14 , 34, "Pressure:");
      u8g.drawStr(28, 47, pre);
      break;
    case 6:
      stepAngle = 91 + random(20);
      //      radius = radius +

  }
}

void draw2(void) {
  u8g2.setFont(u8g_font_tpssb);
  u8g2.drawStr(2 , 10, "Temperature:");
  u8g2.drawStr(28, 24, tem);
  u8g2.drawStr(14 , 34, "Pressure:");
  u8g2.drawStr(28, 47, pre);
}

void setup(void) {
  bmp.begin();
}

void loop(void) {
  // picture loop
  u8g.setRot180();
  u8g.firstPage();
  do {
    draw();
  } while ( u8g.nextPage() );
  u8g2.firstPage();
  do {
    draw2();
  } while ( u8g2.nextPage() );

  // rebuild the picture after some delay
  if (draw_state != 5) {
    delay(6000);
    draw_state++;
    if (draw_state == 5) {
      timer = millis();
    }
    if (draw_state > 5) {
      draw_state = 1;
    }
  }
  else {
    sensors_event_t event;
    bmp.getEvent(&event);

    if (event.pressure)
    {
      pressure = event.pressure;
      pressure = pressure * 0.0295299830714;
      dtostrf(pressure, 1, 2, pre);
    }
    bmp.getTemperature(&temperature);
    temperature = (temperature * 9 / 5) + 29;
    dtostrf(temperature, 1, 2, tem);
    if (millis() - timer > 10000) {
      draw_state++;
      if (draw_state > 5) {
        draw_state = 1;
      }
    }
  }
}
